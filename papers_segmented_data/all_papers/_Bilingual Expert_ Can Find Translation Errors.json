{"title": "\"Bilingual Expert\" Can Find Translation Errors", "paper_id": "cef2e6e3dd0b912cd592ed078361b6807f980c04", "segments": [["cef2e6e3dd0b912cd592ed078361b6807f980c04_0", "The performances of machine translation (MT) systems are usually evaluated by the metric BLEU when the golden references are provided. However, in the case of model inference or production deployment, golden references are usually expensively available, such as human annotation with bilingual expertise. In order to address the issue of translation quality estimation (QE) without reference, we propose a general framework for automatic evaluation of the translation output for the QE task in the Conference on Statistical Machine Translation (WMT). We first build a conditional target language model with a novel bidirectional transformer, named neural bilingual expert model, which is pre-trained on large parallel corpora for feature extraction. For QE inference, the bilingual expert model can simultaneously produce the joint latent representation between the source and the translation, and real-valued measurements of possible erroneous tokens based on the prior knowledge learned from parallel data. Subsequently, the features will further be fed into a simple Bi-LSTM predictive model for quality estimation. The experimental results show that our approach achieves the state-of-the-art performance in most public available datasets of WMT 2017/2018 QE task. * indicates equal contribution.", "abstract", "abstract"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_1", "The neural machine translation (NMT) in a sequenceto-sequence fashion, empowering an end-to-end learning approach for automatic translation system, has accomplished great success to potentially overcome many of the weaknesses of conventional phrase-based translation, and claimed being close to human parity for certain language pairs (Wu et al. 2016;Hassan et al. 2018). However, current MT systems are still not perfect to meet the real-world applications without human post-editing (a popular example is the Chinese to English translation test at Google online system 1 , which translated \"\u82f9\u679c\u6bd4\u8c37\u6b4c\u5389\u5bb3\" to \"Apple is worse than Google\", where the correct translation should be \"Apple is better than Google\".). Apparently, additional error correction is needed for even such a simple translation output. A possible solution to take advantage of the existing MT technologies is to collaborate with human trans-lators within a computer-assisted translation (CAT) (Barrachina et al. 2009). In such cases, translation quality estimation (QE) plays a critical role in CAT to reduce human efforts, thereby increasing productivity (Specia 2011). Either the global sentence quality score or the fine-grained word \"OK/BAD\" tags can guide the CAT as an evidence to indicate whether a machine translation output requires further manual post-editing, or even which particular token needs special correction.\nOne traditional direction for translation quality estimation is to formulate the sentence level score or word level tags prediction as a constraint regression or sequence labeling problem respectively (Bojar et al. 2017). The classical baseline model is to use the QuEst++ (Specia, Paetzold, and Scarton 2015) with two modules: rule based feature extractor and scikit-learn 2 SVM algorithms. Similarly, the recent predictor-estimator model (Kim et al. 2017) is a recurrent neural network (RNN) based feature extractor and quality estimation model, ranking first place at WMT 2017 QE.\nAnother promising direction is to build a multi-task learning model to incorporate quality estimation task with automatic post-editing (APE) together (Hokamp 2017; Tan et al. 2017;Chatterjee et al. 2018), achieving the goal of CAT eventually. In this paper, we will first adopt the traditional single task framework to describe our model. In the experimental section, we also propose an extension to support multi-task learning for QE and APE simultaneously.\nHowever, the final prediction model for scoring or tagging is not the main contribution in our work. Since there are many publicly available bilingual corpora, we can readily build a conditional language model as a robust feature extractor. The high level joint latent representation of the source and the target in a parallel pair can hopefully capture the alignment or semantic information. In contrast, when a source and a low-quality machine translation are fed into the pre-trained language model, the distribution of latent features is very likely to be different from the one that grammatically correct target has. Intuitively, people can learn the foreign language from reading the correct translation to their native language. Gradually, they may acquire the ability to be aware of the abnormality, even when errors appear in a sentence have never seen before. Additionally, we design 4-dimensional token mis-matching features from the pretrained model, measuring the difference between what the bilingual expert model will predict and the actual token of machine translation output.\nParticularly, we use the recent proposed self-attention mechanism and transformer neural networks (Vaswani et al. 2017) to build the conditional language model -neural bilingual expert. The model consists of the traditional transformer encoder for the source sentence and a novel bidirectional transformer decoder for the target sentence. It will be pre-trained on the large parallel corpus, and then produce high level features for the downstream quality estimation task. Constructing pre-trained word embedding on our designed language models has shown great improvement in many downstream NLP tasks. Both ELMO (Peters et al. 2018) and the OpenAI's transformer decoder trained for monolingual language model (Radford et al. 2018) are good illustrations. Bidirectional attention mechanism was mainly proposed to achieve success in machine reading comprehension, such BiDAF (Seo et al. 2016) and(Shen et al. 2018). However, all of them are used for monolingual training without involving other conditional language.\nThe conditional language model can play the role of automatic post-editing as well. Since shifts were not annotated as word order errors (but rather as deletions and insertions) to avoid introducing noise in the annotation, missing tokens in the machine translations, as indicated by the TER tool (Snover et al. 2006), are annotated as follows: after each token in the sentence and at sentence start, a gap tag is placed. In this situation, we can use the same network structure of conditional language model to enable the gap prediction (insertions) for missing token of translation output conditional on the source sentence. Using the deletion operation in word level tagging (by adding class \"D\" rather than \"OK/BAD\"), we are literally trying to predict post-editing.\nThis paper makes the following main contributions: i) we propose a novel approach with bidirectional transformer for building a conditional language model and pre-train it on available large bilingual corpora, which can further be used as automatic post-editing model. ii) we address the importance of the 4-dimensional mis-matching features, and in the experiments, with only these features, our approach can still achieve comparable results with No. 1 system in WMT 2017 QE task. iii) we develop a differentiable word-level quality estimation model to support data preprocessing with byte-pair-encoding (BPE) tokenization, bridging the gap between words and BPE tokens. iv) extensive experiments on real-world datasets (e.g., IT and pharmacy domain corpora) demonstrate our method is effective and achieve the stateof-the-art performance in most tasks.", "Introduction", "introduction"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_2", "Quality Estimation for Machine Translation Given the bilingual corpus, from the statistical view we can formulate the machine translation system as p(t|s) = p(t|z)p(z|s), where s represents the tokens sequence of source sentence, t for target sentence, and z is the latent variable to represent the encoded source sentence. Therefore, p(z|s) and p(t|z) can be practically considered as the encoder and decoder. In the quality estimation task of machine translation, the machine translation system is agnostic and the training dataset is given in the format of triplet (s, m, t), where m is the translation output from the unknown machine translation system with the input s, and t represents the human post-edited sentence based on s and m. Notice we abuse using notation t to refer both golden reference and human post-edited sentence.\nIn general, the quality of m can be evaluated either in the global sentence level or the fine-grained word level. The sentence level score is calculated by the percentage of edits needed to fix for m, denoted as HTER. The word level evaluation is framed as the sequential binary classification problem to distinguish between 'OK' and 'BAD' for each token in translation output. Particularly, the binary word-level labels are generated by using the alignments provided by the TER tool (Snover et al. 2006) between m and t. Notice the sentence HTER and word labels can also deterministically be calculated by the TER tool when m and t are both present. However, in inference only the source sentence s and machine translation m are available, thus essentially requiring an automatic method for quality estimation of machine translation output at run-time, without relying on any reference.\nWe can assume that the training data contains the tuple (s, m, t, h, y), where h is a scalar to represent HTER, and y is a binary vector to indicate the 'OK/BAD' labels of machine translation output. Considering the inference scenario, our task is to learn a regression model p(h|s, m) and a sequence labeling model p(y|s, m).", "Background", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_3", "In this section, we will first highlight how to train a neural bilingual expert model with a parallel corpus including (s, t) pairs. By default of QE task, the machine translation system p(t|z)p(z|s) is unknown, but in representation learning we are usually interested in the latent variable z, whose posterior may contain the deep semantic information between the source and the target languages, and be beneficial to many downstream tasks (Hill, Cho, and Korhonen 2016). According to the Bayes rule, we can write the posterior distribution of the latent variable as,\np(z|t, s) = p(t|z)p(z|s) p(t|s)(1)\nwhere the integral p(t|s) = p(t|z)p(z|s)dz is usually intractable. Instead of exact inference, we propose a variational distribution q(z|t, s) to approximate true posterior by minimizing exclusive Kullback-Leibler (KL) divergence.\nmin D KL (q(z|t, s) p(z|t, s))(2)\nRather than optimizing the objective function above, we can equivalently maximize the following one, \nmax E q(z|t,s) [p(t|z)] \u2212 D KL (q(z|t, s) p(z|s)).(3", "Methodology Bilingual Expert Model", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_4", "Once the bilingual expert model has been fully trained on large parallel corpora, we can reasonably assume the model will predict higher likelihood for the correct target token, given the source and other context of the target, if only very few tokens are incorrect. Therefore, we will use the prior knowledge learned by bilingual expert to extract the features for subsequent translation error prediction. Basically, we will first design the sequential (token-wise) model derived features based upon the pre-trained model with (s, m) pair as input. The latent representation z k = Concat( \u2212 \u2192 z k , \u2190 \u2212 z k ) should naturally be the high level features. As we discussed previously, the entire latent variable z should generally summarize the information of the source and the target. In Equation ( 6), the distribution of z k is deliberately defined to contain the information from the source and the context around the k-th token in the target. We see this by observing the computational graph in the right panel of Figure 1, e.g., the token \"den\" of target is desired to predict, but only the information of the source and all the other tokens in the target will be propagated to the final layer for prediction. It will be reasonably beneficial to our manually extracted mis-matching features introduced later.\nIn ELMO (Peters et al. 2018), the token embedding is also used as one linear component to compute the final feature. However, in our case that translation output is fed into the model, it is not guaranteed that every single token is correct. Therefore, we design a different token embedding feature following the rationale of subtle information flow within latent variable z k . In fact, we use the embedding concatenation of two neighbor tokens Concat(e t k\u22121 , e t k+1 ). Since the possibly erroneous translation may mislead the model in the downstream quality estimation task, we did not extract any information from current token t k . More importantly, the correct syntax representation of the token which is supposed to be translated should come from the source sentence, which has been encoded into z via joint attention.", "Model Derived Features", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_5", "Besides the proposed model derived features that are exactly the nodes within the computational graph of the bidirectional transformer, we intuitively found another type of crucial features that can directly measure how the prior knowledge from the well-trained bilingual expert model is different from the translation. To make it concrete, p(t k |\u2022) follows the categorical distribution with the number of classes equal to the vocabulary size. Since we pre-train the bilingual expert model on parallel corpara, the objective (3) is theoretically to maximize the likelihood of each p(t k |\u2022), which achieves its maximum when t k is ground truth. Intuitively, we should have p(m 1. Following this intuition, we propose the mis-matching features.\nk |\u2022) \u2264 p(t k |\u2022) for optimal model if m k = t k , illustrated in top-left block of Figure\nSuppose l k is the logits vector before applying the softmax operation, i.e. p(t k |\u2022) \u223c Categorical(sof tmax(l k )), thus we can define the 4-dimensional mis-matching features as the following vector, \nf mm k = (l k,m k , l k,i k max , l k,m k \u2212 l k,i k max , I m k =i k max ) (7)\nf k = Concat( \u2212 \u2192 z k , \u2190 \u2212 z k , et k\u22121 , et k+1 , f mm k )\nfor QE training data (s, m). 4: Train Bi-LSTM model via objectives (9)(10). 5: return Predict h, y for QE inference data where m k represents the vocabulary id of the k-th token in translation output, i k max = arg max i l k is the id that the bilingual expert predicts, and I is indicator function. Therefore, these four values will directly reflect the differences or errors. Apparently, if the machine translation coincides with the bilingual expert prediction, the first 2 elements of f mm k should be identical and the last two elements, representing soft and hard differences, should be both 0. We empirically found the quality estimation model can achieve comparable result even with the mis-matching features alone.", "Mis-matching Features", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_6", "To this end, we have the model derived and manually designed sequential features, each time stamp of which is corresponding to a fixed size vector. Our quality estimation task is built upon the bidirectional LSTM (Graves and Schmidhuber 2005) model, being widely used for sequence classification or sequence tagging problems. In sequence tagging, Huang, Xu, and Yu proposed a variant of Bi-LSTM with one Conditional Random Field (CRF) layer (Bi-LSTM-CRF).\nWe empirically found that the extra CRF layer did not show any significant improvement over vanilla Bi-LSTM, which we simply adopted. Another natural question is whether the traditional encoder self-attention or our proposed forward/backward self-attention can be an alternative to the Bi-LSTM. We empirically found the results with self-attention module become even worse, and we suspect the scarcity of labelled quality estimation data, being incomparable to the sufficient parallel corpus, is the main reason.\nWe concatenate all sequential features along the depth direction to obtain a single vector, denoted as {f k } T k=1 , where T is the number of tokens in m. Therefore, the sentence level score HTER prediction can be formulated as a regression problem (9), and the word error prediction is a sequence labeling problem (10),\n\u2212 \u2212 \u2192 h 1:T , \u2190 \u2212 \u2212 h 1:T = Bi-LSTM({f k } T k=1 ) (8) arg min h \u2212 sigmoid w [ \u2212 \u2192 h T , \u2190 \u2212 h T ] 2 2 (9) arg min T k=1 XENT(y k , W[ \u2212 \u2192 h k , \u2190 \u2212 h k ])(10)\nwhere w is a vector, W is a matrix, y k is the error label for the k-th token of translation output, and XENT is the cross entropy loss (with logits). Notice HTER h is a real value  within interval [0, 1], we apply a squash function \"sigmoid\" for rescaling in the regression model. Since the HTER is a global score for the entire sentence, we use the hidden states of the last time stamp in the forward/backward LSTMs as the regression signals. Actually, we can train the two losses together in a multi-task setting. In summary, we describe the outline of our proposed approach in Algorithm 1.", "Bi-LSTM Quality Estimation", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_7", "The data resources that we used for training the neural Bilingual Expert model are mainly from WMT 3 : (i) parallel corpora released for the WMT17/18 News Machine Translation Task, (ii) UFAL Medical Corpus and Khresmoi development data released for the WMT17/18 Biomedical Translation Task, (iii) src-pe pairs for the WMT17/18 QE Task. To ensure the quality of the corpora, we filtered the source and target sentence with length \u226470 and the length ratio between 1/3 to 3, thus resulting roughly 9 million (2017) and 25 million (2018) parallel sentences pairs for both English\u2194German directions. We mainly tried word tokenization for the corpus in the WMT17 QE task, where the word tokenization naturally fits the word level QE task. For WMT18, we applied byte-pair-encoding (BPE) (Sennrich, Haddow, and Birch 2016) tokenization to reduce the number of unknown tokens. However, there exists the discrepancy between word token tagging prediction and BPE tokenization, and we will present how to bridge the gap in the next section. We also test our model on the CWMT 2018 Chinese English sentence QE task 4 . Since the two languages are unrelated, we tokenize them separately.\nThe number of layers in the bidirectional transformer for each module is 2, and the number of hidden units for feedforward sub-layer is 512. We use the 8-head self-attention in practice, since the single one is just a weighted average of previous layers. The bilingual expert model is trained on 8 Nvidia P-100 GPUs for about 3 days until convergence. For translation QE model, we use only one layer Bi-LSTM, and it is trained on a single GPU.\nWe evaluate our algorithm on the testing data of WMT 2017/2018, and development data of CWMT 2018. Notice for the QE task of WMT 2017, it is forbidden to use any   ", "Experiments Setting Description", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_8", "The sentence level results of WMT 2017 are listed in Table 1. We mainly compared our single model with the two algorithms (Kim et al. 2017;Martins, Kepler, and Monteiro 2017), ranking top 3 in the WMT 2017 finalist. Unbabel is combination of a feature-rich sequential linear model with a neural network. POSTECH is a predictor-estimator model with all Bi-GRU modules. Baseline is the official provided system. The primary metrics of sentence level task are Pearson's correlation and Spearman's rank correlation of the entire testing data. Alternatively, mean average error (MAE), root mean squared error (RMSE), or the average of delta values (DeltaAvg) can also measure the performance of overall predictions, but not be a ranking reference in the QE task.\nFor both single and ensemble model comparisons, our algorithm can outperform all other systems for the two primary metrics. The ranking results are generated by the predicted HTER scores. In addition, we also analyze the importance of model derived features (MD) and mis-matching features (MM) the ablation study. With 4-dimensional mis-matching features alone, the model can still achieve comparable or  better performance than the second single system last year. It demonstrates that the low dimensional features can provide a strong prediction signal as well.\nWe also report the result on unrelated language pair, Chinese and English, as shown in Table 3, where BT means back-translation. Our single model without back-translation has outperformed the best system in the competition.", "Sentence Level Scoring And Ranking", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_9", "The metric of word level is evaluated in terms of classification performance via the multiplication of F1-scores for the 'OK' and 'BAD' classes against the true labels. For the binary classification, we tuned the threshold of the classifier on the development data and applied to the test data. The overall results are shown at Table 4. The baseline is provided by the offical WMT organizers, and the system is trained by CRFSuite toolkit with passive-aggressive algorithm (Okazaki 2007). We also compared the top 3 algorithms in WMT17 QE task, POSTECH (Kim et al. 2017), Unbabel (Martins, Kepler, and Monteiro 2017), and DCU (Martins et al. 2017). DCU is a stacked neural model by exploiting synergies between the related tasks of word-level quality estimation and automatic post-editing. In the primary metric F1-Multi, our algorithm of the single model outperforms all other models, including the best ensemble system in WMT17. In WMT18 word level QE task, our approach exceeds all other algorithms with significant better numbers.\nThe higher value of single F1-OK or F1-BAD cannot reflect the robustness of the algorithm, since it may result in lower F1 of another metric. Though we presented the F1-OK and F1-BAD, it is not a valid metric to QE task. However, by comparing them, we can conclude that all algorithms tend to classify the word tag as OK in general, since the true labels are very imbalanced. This is the reason why we use the threshold tuning strategy to finalize our classifier.", "Word Level For Word Tagging", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_10", "The gap level error prediction is important to machine translation system as well. Missing tokens in the machine translation, as indicated by the TER tool, are annotated as follows: after each token in the sentence and at the sentence start, a gap tag is placed. Note that the number of gap tags for each translation sentence is T +1, including the predictions before the first token and after last one. Therefore, we can directly build the gap prediction model by modifying (10) as, arg min\nT k=0 XENT(g k , W[ \u2212 \u2192 h k , \u2190 \u2212 h k , \u2212 \u2212\u2212 \u2192 h k+1 , \u2190 \u2212\u2212 \u2212 h k+1 ]) (11)\nwhere g k is the gap tag between the kth and k+1st tokens. We can train the neural bilingual expert model for gap prediction to extract more representative features for the downstream task. Basically, we have the following factorization model p(t, t g |z) = p(t|z)p(t g |z) and q(z|s, m), where p(t|z) is identical as previously discussed model, gap token prediction distribution p(t g |z)\n= k p(t g k | \u2212 \u2192 z k , \u2190 \u2212 z k , \u2212\u2212\u2192 z k+1 , \u2190\u2212\u2212 z k+1\n) and q becomes conditional on m. Note that we need to define a \"<blank>\" token for gap prediction, meaning that nothing needs to be inserted. Therefore, it also results in a side product -automatic post-editing. If we label the human post-edited translations by the insertion or deletion operations to machine translations (which could be done by using TER tool), we can train the model to predict such operations on the target side, achieving a better APE system eventually. We leave this as the future work.\nAs we discussed in the introduction, most computer assisted translation scenarios use the quality estimation model as the an activator of APE, a guidance to APE corrections, or a selector of final translation output (Chatterjee et al. 2018). Though QE can play the role of a helper function for APE, they are fundamentally considered as two separated tasks. In our proposed model, after we pre-trained the neural bilingual model for gap prediction, we can subsequently feed the model derived and mis-matching features to the Bi-LSTM model for gap quality estimation. We propose a direction to unify the quality estimation and automatic post-editing. First, we demonstrate the performance of our result for gap quality estimation in the left-side of Table 5. We also show several examples of APE results by our pre-trained model in the right-side of Table 5.", "Word Level For Gap Tagging", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_11", "In many NMT systems, using BPE or subword units gives an effective way to deal with rare words. Especially in German, there are a bunch of compound words, which are simply a combination of two or more words that function as a single unit of meaning, e.g. \"handschuh\" means glove in German, which is literally the \"hand shoe\". BPE tokenization gives a MT w\u00e4hlen sie im bedienfeld \" profile \" des dialogfelds \" preflight \" auf die schaltfl\u00e4che \" l\u00e4ngsschnitte ausw\u00e4hlen . \" APE klicken sie im bedienfeld \" profile \" des dialogfelds \" preflight \" auf die schaltfl\u00e4che \" profile ausw\u00e4hlen . \" PE klicken sie im bedienfeld \" profile \" des dialogfelds \" preflight \" auf die schaltfl\u00e4che \" profile ausw\u00e4hlen . \"\nMT das teilen von komplexen symbolen und gro\u00dfe textbl\u00f6cke kann viel zeit in anspruch nehmen . APE das trennen von komplexen symbolen und gro\u00dfen textbl\u00f6cke kann viel zeit in anspruch nehmen . PE das aufteilen von komplexen symbolen und gro\u00dfen textbl\u00f6cke kann viel zeit in anspruch nehmen . MT sie m\u00fcssen nicht auf den ersten punkt , um das polygon zu schlie\u00dfen .\nAPE sie m\u00fcssen nicht auf den ersten punkt klicken , um das polygon zu schlie\u00dfen . PE sie m\u00fcssen nicht auf den ersten punkt klicken , um das polygon zu schlie\u00dfen . MT sie k\u00f6nnen bis zu vier zeichen .\nAPE sie k\u00f6nnen bis zu vier zeichen eingeben .   good balance between the flexibility of single characters and the efficiency of full words for decoding, and also sidesteps the need for special treatment of unknown words. For sentence level HTER prediction, there is no harm or conflict to use BPE, since the regression signals only care about the hidden states of the last time stamps. However, for word level labeling, the length of sequential features L b with BPE tokenization is different from the number of word tokens L w . We propose to average the features of all subword units belonging to one single word token, similar to average pooling along the time axis with dynamic sizes. To make the computational graph differentiable, the BPE segmentation information needs to be stored into a L w \u00d7 L b sparse matrix S, where S ij = 0 if j-th subword unit belongs to i-th word (see Fig 2(a) for an example). The averaged features can be computed by matrix multiplication.\nWe compared the performance of the word and BPE tokenization on both sentence and word levels, and results are plotted as histograms in Fig 2 (b,c). Similar to NMT systems, the finer grained BPE tokenization can improve the QE performance in most tasks. In the sentence level, BPE model got a lower Pearson's r for en-de NMT QE task, which is very likely due to the small data size (<14000). In the word level, if we did not tune the threshold by using the default 0.5, the BPE model can always be better. After threshold tuning, the BPE model may have less improvement (we tune the threshold on development data and evaluate on it as well, since we did not have the ground truth of the testing data).\nActually, the two models can be jointly trained during the stage of quality estimation, no matter the preprocessing is word or BPE tokenization. Even for BPE tokenization, we can do back-propagation to update the \"bilingual expert\" model when we are training Bi-LSTM, if appropriate column and row paddings are added to the segmentation matrix. We will also leave this as another future work.", "Extending to BPE Tokenization", "background"], ["cef2e6e3dd0b912cd592ed078361b6807f980c04_12", "In this paper, we present a novel approach to solve the quality estimation problem for machine translation systems. We first introduce the neural \"bilingual expert\" model as the prior knowledge model. Then, we use a simple Bi-LSTM as the quality estimation model with the extracted model derived and manually designed mis-matching features. In the end, we test our algorithm on the public available WMT 17/18 QE competition dataset and yield better performance than other algorithms in most downstream tasks.", "Conclusion", "results"]], "meta": {"conference": "AAAI", "year": 2019, "authors": "Kai  Fan, Bo  Li, Fen  Zhou, Jiayi  Wang"}}